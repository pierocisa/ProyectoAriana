import { Component, NgZone }      from '@angular/core';
import { CommonModule }            from '@angular/common';
import { FormsModule, NgForm }     from '@angular/forms';
import { Router }                  from '@angular/router';

import {
  Auth,
  signInWithEmailAndPassword,
  createUserWithEmailAndPassword,
  sendEmailVerification
} from '@angular/fire/auth';
import { Firestore, doc, setDoc }  from '@angular/fire/firestore';

@Component({
  standalone: true,
  selector: 'app-login',
  imports:    [ CommonModule, FormsModule ],
  templateUrl: './login.html',
  styleUrls:  ['./login.css']
})
export class LoginComponent {
  email       = '';
  password    = '';
  isLogin     = true;    // true = ‚ÄúIniciar sesi√≥n‚Äù, false = ‚ÄúRegistrarse‚Äù
  errorMsg    = '';
  infoMsg     = '';

  constructor(
    private auth:   Auth,
    private fs:     Firestore,
    private router: Router,
    private ngZone: NgZone
  ) {}

  toggleMode() {
    this.errorMsg = '';
    this.infoMsg  = '';
    this.isLogin  = !this.isLogin;
  }

  /** Maneja el submit del formulario */
  async submit(form: NgForm) {
    this.errorMsg = '';
    this.infoMsg  = '';

    if (form.invalid) {
      this.errorMsg = 'Por favor completa todos los campos.';
      return;
    }

    try {
      if (this.isLogin) {
        // ‚Äî LOGIN ‚Äî
        const cred = await signInWithEmailAndPassword(
          this.auth,
          this.email,
          this.password
        );

        // Verifica que el correo est√© confirmado
        if (!cred.user.emailVerified) {
          this.errorMsg = '‚ùå Tu correo no est√° verificado. Revisa tu bandeja.';
          return;
        }

        // üîë A√ëADIDO: marcamos sesi√≥n guardando algo en localStorage
        localStorage.setItem('token', cred.user.uid);

        // Acceso concedido ‚Üí admin
        this.ngZone.run(() => this.router.navigate(['/admin']));

      } else {
        // ‚Äî SIGNUP ‚Äî
        const cred = await createUserWithEmailAndPassword(
          this.auth,
          this.email,
          this.password
        );

        // Env√≠a correo de verificaci√≥n
        await sendEmailVerification(cred.user, {
          url: window.location.origin + '/login'
        });

        // Guarda perfil m√≠nimo en Firestore
        await setDoc(doc(this.fs, 'users', cred.user.uid), {
          email:     cred.user.email,
          role:      'customer',
          createdAt: Date.now()
        });

        this.infoMsg = 
          '‚úÖ Te enviamos un correo de verificaci√≥n. ' +
          '√Åbrelo (rev√≠sate spam) y luego vuelve a iniciar sesi√≥n.';
        this.isLogin = true;
      }
    } catch (e: any) {
      this.errorMsg = e.code
        ? e.code.replace('auth/', '').replace(/-/g, ' ')
        : (e.message || 'Error inesperado');
    }
  }

  /** Reenv√≠a el correo de verificaci√≥n si a√∫n no se confirm√≥ */
  async resendVerification() {
    this.errorMsg = '';
    this.infoMsg  = '';
    const user = this.auth.currentUser;
    if (user && !user.emailVerified) {
      await sendEmailVerification(user, { url: window.location.origin + '/login' });
      this.infoMsg = '‚úÖ Reenviamos el correo de verificaci√≥n.';
    } else {
      this.errorMsg = '‚ö†Ô∏è No hay usuario pendiente de verificaci√≥n.';
    }
  }
}